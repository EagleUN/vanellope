swagger: '2.0'
info:
  version: 1.0.0
  title: Vanellope
  description: Microservice of sign up and log in deploy on Ruby on Rails + Postgres
  license:
    name: Software Architecture, 2019-I
host: 127.0.0.1:3001
basePath: /
tags:
- name: "signup"
  description: "Database management"
- name: "log"
  description: "Access to Eagle UN of a registered user"
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /signup/user/create:
    post:
      tags:
        - "signup"
      summary: Creates a new user
      operationId: createUser
      parameters:
        - name: user
          in: body
          required: true
          description: User Object with the correct parameters
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/UserComplete'
        '406':
          description: Not Acceptable (Invalid Params)
        '500':
          description: Internal Server Error

  /signup/users:
    get:
      tags:
        - "signup"
      summary: Returns all Users
      operationId: allUsers
      responses:
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/UsersList'
        '406':
          description: Not Acceptable (Invalid Params)
        '500':
          description: Internal Server Error

  /signup/user_id:
    get:
      tags:
        - "signup"
      summary: Returns a user with the given id
      operationId: userById
      parameters:
        - name: id
          in: body
          description: The user with that id to be returned
          required: true
          schema:
            $ref: '#/definitions/GetUserId'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/GetUser200'
        '406':
            description: Not Acceptable (Invalid Params)
        '500':
          description: Internal Server Error

  /signup/user_email:
    get:
      tags:
        - "signup"
      summary: Returns a user with the given email
      operationId: userByEmail
      parameters:
        - name: email
          in: body
          description: The user with that email to be returned
          required: true
          schema:
            $ref: '#/definitions/GetUserEmail'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/GetUser200'
        '406':
            description: Not Acceptable (Invalid Params)
        '500':
          description: Internal Server Error

  /signup/user:
    patch:
      tags:
        - "signup"
      summary: Updates a user with the given id
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: Updates user fields by getting the id
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        '202':
          description: Aceptable
          schema:
            $ref: '#/definitions/UpdateUser'
        '406':
            description: Not Acceptable (Invalid Params)
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error

    delete:
      tags:
        - "signup"
      summary: Deletes a user with the id
      operationId: deleteUser
      parameters:
        - name: id
          in: body
          description: Delete the user by obtaining the id
          required: true
          schema:
            $ref: '#/definitions/IdUser'
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
  
  /log/user/in:
    post:
      tags:
        - "log"
      summary: Creates a new user session and returns of a token User
      operationId: createNewUserSession
      parameters:
        - name: userSession
          in: body
          required: true
          description: Log in of the user with the correct parameters
          schema:
            $ref: '#/definitions/LogInUser'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/TokenUser'
        '404':
          description: Not found (Invalid Params)
        '500':
          description: Internal Server Error

  /log/user:
    get:
      tags:
        - "log"
      summary: Returns if a user has login
      operationId: authUser
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /log/user/edit:
    patch:
      tags:
        - "log"
      summary: Updates the current user
      operationId: updateCurrentUser
      parameters:
        - name: user
          in: body
          description: Updates user fields of the current user
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        '202':
          description: Aceptable
          schema:
            $ref: '#/definitions/UpdateUser'
        '406':
            description: Not Acceptable (Invalid Params)
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error


definitions:
  #NewUser
  NewUser:
    type: object
    properties:
      name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
        
  #UserComplete
  UserComplete:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      last_name:
        type: string
      email:
        type: string
      username:
        type: string
      role:
        type: string
      created_at: 
        type: string
      updated_at:
        type: string
      last_login:
        type: string

  #GetUserId
  GetUserId:
    type: object
    properties:
      id:
        type: string

  #GetUserEmail
  GetUserEmail:
    type: object
    properties:
      email:
        type: string

  #IdUser
  IdUser:
    type: object
    properties:
      id:
        type: string

  #UpdateUser
  UpdateUser:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      last_name:
        type: string
      email:
        type: string
      username:
        type: string
      password:
        type: string
      password_confirmation:
        type: string
      current_password:
        type: string

  # User
  User:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string

  # GetUser200
  GetUser200:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      last_name:
        type: string
      username:
        type: string
      email:
        type: string

  # TokenUser
  TokenUser:
    type: object
    properties:
      jwt:
        type: string

  #UsersList
  UsersList:
    type: object
    required:
      - total
      - list
    properties:
      total:
        type: number
      list:
        type: array
        items:
          $ref: '#/definitions/User'

  #LogInUser
  LogInUser:
    type: object
    properties:
      email:
        type: string
      password:
        type: string


# Errors
  ErrorModel:
    type: object
    properties:
      name:
        type: string
      last_name:
        type: string
      email:
        type: 'string'
      password:
        type: string
      password_confirmation:
        type: string